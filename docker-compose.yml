version: '3.8'

networks:
  kafka-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CREATE_TOPICS: "click_events:1:1" 
    networks:
      - kafka-network

  kafka-manager:
    image: hlebalbau/kafka-manager:latest
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
    networks:
      - kafka-network

  kafka-connect:
    image: debezium/connect:1.9
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:9092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "my_connect_configs"
      OFFSET_STORAGE_TOPIC: "my_connect_offsets"
      STATUS_STORAGE_TOPIC: "my_connect_statuses"
      CONNECT_PROVIDED_PLUGINS: "io.debezium.connector.mysql.MySqlConnector"
      CONNECTOR_CLASS: "io.debezium.connector.mysql.MySqlConnector"
      DATABASE_HOSTNAME: "mysql"
      DATABASE_PORT: 3306
      DATABASE_USER: "debezium"
      DATABASE_PASSWORD: "dbz"
      DATABASE_SERVER_ID: 184054
      DATABASE_SERVER_NAME: "mysql"
      DATABASE_HISTORY_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      DATABASE_HISTORY_KAFKA_TOPIC: "dbhistory.fullfillment"
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G -XX:MaxDirectMemorySize=4G"
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 2097152000
      CONNECT_PRODUCER_MAX_PARTITION_FETCH_BYTES: 2097152000
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 2097152000
    depends_on:
      - kafka
    networks:
      - kafka-network

  debezium-connector-setup:
    image: curlimages/curl:7.78.0
    depends_on:
      - kafka-connect
    entrypoint: ["sh", "/config/register-debezium-connector.sh"]
    volumes:
      - ./register-debezium-connector.sh:/config/register-debezium-connector.sh
    networks:
      - kafka-network

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.23.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    ports:
      - "8088:8088"
    volumes:
      - ksqldb-data:/var/lib/ksql
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: "ksqldb-server"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
    networks:
      - kafka-network

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.23.1
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-network


  mysql:
    container_name: mysql
    image: mysql:8.0.33
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: "surface_inspection"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h mysql -u root --password=password || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - kafka-network

  backend:
    container_name: backend
    build: ./backend
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=surface_inspection
      - SESSION_SECRET=your_secret_key
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend:/app
    ports:
      - "3000:3000"
    entrypoint: ["sh", "-c", "until mysqladmin ping -h mysql --silent; do echo 'waiting for mysql'; sleep 2; done && npm start"]
    networks:
      - kafka-network

  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "8080:80"
    networks:
      - kafka-network

volumes:
  mysql_data:
  ksqldb-data:
    external: false